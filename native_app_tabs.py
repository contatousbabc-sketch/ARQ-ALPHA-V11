#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Abas da Interface Nativa - ARQV30 Enhanced v3.0
Implementa√ß√£o das abas restantes da aplica√ß√£o nativa
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime, timedelta
import threading
import asyncio
from typing import Dict, Any, List, Optional

# Importa componentes locais
from native_windows_app import ModernStyle, ModernCard, ModernButton, ModernProgressBar, ModernListView

class NativeAppTabs:
    """Classe com implementa√ß√£o das abas da aplica√ß√£o nativa"""
    
    def __init__(self, app_instance):
        self.app = app_instance
    
    def create_setup_tab(self):
        """Aba de configura√ß√£o da an√°lise"""
        setup_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(setup_frame, "‚öôÔ∏è Configura√ß√£o", "‚öôÔ∏è")
        
        # Scroll container
        canvas = tk.Canvas(setup_frame, bg=ModernStyle.COLORS['bg_secondary'], 
                          highlightthickness=0)
        scrollbar = ttk.Scrollbar(setup_frame, orient="vertical", command=canvas.yview,
                                 style='Modern.Vertical.TScrollbar')
        scrollable_frame = ttk.Frame(canvas, style='Modern.TFrame')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Card de configura√ß√£o principal
        config_card = ModernCard(scrollable_frame, 
                                title="Configura√ß√£o da An√°lise", 
                                subtitle="Configure os par√¢metros para an√°lise completa",
                                icon="‚öôÔ∏è")
        config_card.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
        
        # Formul√°rio de configura√ß√£o
        self.create_config_form(config_card.content_frame)
        
        # Card de sess√µes existentes
        sessions_card = ModernCard(scrollable_frame,
                                  title="Sess√µes Existentes",
                                  subtitle="Continue uma an√°lise em progresso",
                                  icon="üìÇ")
        sessions_card.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
        
        self.create_sessions_list(sessions_card.content_frame)
    
    def create_config_form(self, parent):
        """Cria formul√°rio de configura√ß√£o"""
        form_frame = ttk.Frame(parent, style='Modern.TFrame')
        form_frame.pack(fill='both', expand=True, pady=ModernStyle.SPACING['md'])
        
        # Grid de campos
        fields = [
            ("Nicho/Mercado:", "nicho", "Ex: Marketing Digital, E-commerce, Consultoria"),
            ("P√∫blico-alvo:", "publico_alvo", "Ex: Empreendedores, PMEs, Freelancers"),
            ("Localiza√ß√£o:", "localizacao", "Ex: Brasil, S√£o Paulo, Nacional"),
            ("Produto/Servi√ßo:", "produto", "Ex: Curso Online, Software, Consultoria"),
            ("Or√ßamento (R$):", "orcamento", "Ex: 10000, 50000, 100000"),
        ]
        
        self.form_vars = {}
        
        for i, (label, key, placeholder) in enumerate(fields):
            # Label
            label_widget = ttk.Label(form_frame, text=label, style='Subheading.TLabel')
            label_widget.grid(row=i, column=0, sticky='w', padx=(0, ModernStyle.SPACING['md']),
                             pady=(ModernStyle.SPACING['sm'], 0))
            
            # Entry
            var = tk.StringVar()
            entry = ttk.Entry(form_frame, textvariable=var, style='Modern.TEntry',
                             width=40, font=ModernStyle.FONTS['body'])
            entry.grid(row=i, column=1, sticky='ew', pady=(ModernStyle.SPACING['sm'], 0))
            
            # Placeholder como tooltip
            entry.insert(0, placeholder)
            entry.bind('<FocusIn>', lambda e, entry=entry, ph=placeholder: 
                      entry.delete(0, 'end') if entry.get() == ph else None)
            entry.bind('<FocusOut>', lambda e, entry=entry, ph=placeholder: 
                      entry.insert(0, ph) if entry.get() == '' else None)
            
            self.form_vars[key] = var
        
        # Configura grid
        form_frame.columnconfigure(1, weight=1)
        
        # Bot√µes de a√ß√£o
        buttons_frame = ttk.Frame(parent, style='Modern.TFrame')
        buttons_frame.pack(fill='x', pady=(ModernStyle.SPACING['lg'], 0))
        
        # Bot√£o iniciar an√°lise
        start_btn = ModernButton(buttons_frame, 
                                text="Iniciar An√°lise Completa",
                                command=self.start_complete_analysis,
                                style_type="primary",
                                icon="üöÄ")
        start_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        # Bot√£o salvar configura√ß√£o
        save_btn = ModernButton(buttons_frame,
                               text="Salvar Configura√ß√£o",
                               command=self.save_configuration,
                               style_type="secondary",
                               icon="üíæ")
        save_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        # Bot√£o carregar configura√ß√£o
        load_btn = ModernButton(buttons_frame,
                               text="Carregar Configura√ß√£o",
                               command=self.load_configuration,
                               style_type="outline",
                               icon="üìÇ")
        load_btn.pack(side='left')
    
    def create_sessions_list(self, parent):
        """Cria lista de sess√µes existentes"""
        # Lista de sess√µes
        self.sessions_list = ModernListView(parent, 
                                           columns=['ID', 'Criada em', 'Status', 'Progresso', 'M√≥dulos'])
        self.sessions_list.pack(fill='both', expand=True, pady=ModernStyle.SPACING['md'])
        
        # Bot√µes de sess√£o
        session_buttons = ttk.Frame(parent, style='Modern.TFrame')
        session_buttons.pack(fill='x', pady=(ModernStyle.SPACING['md'], 0))
        
        continue_btn = ModernButton(session_buttons,
                                   text="Continuar Sess√£o",
                                   command=self.continue_session,
                                   style_type="success",
                                   icon="‚ñ∂Ô∏è")
        continue_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        delete_btn = ModernButton(session_buttons,
                                 text="Excluir Sess√£o",
                                 command=self.delete_session,
                                 style_type="error",
                                 icon="üóëÔ∏è")
        delete_btn.pack(side='left')
        
        # Carrega sess√µes existentes
        self.refresh_sessions_list()
    
    def create_modules_tab(self):
        """Aba de m√≥dulos de an√°lise"""
        modules_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(modules_frame, "üß© M√≥dulos", "üß©")
        
        # Scroll container
        canvas = tk.Canvas(modules_frame, bg=ModernStyle.COLORS['bg_secondary'], 
                          highlightthickness=0)
        scrollbar = ttk.Scrollbar(modules_frame, orient="vertical", command=canvas.yview,
                                 style='Modern.Vertical.TScrollbar')
        scrollable_frame = ttk.Frame(canvas, style='Modern.TFrame')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Cards dos m√≥dulos
        self.create_detailed_modules(scrollable_frame)
    
    def create_detailed_modules(self, parent):
        """Cria cards detalhados dos m√≥dulos"""
        modules_data = [
            {
                'icon': 'üë§', 'name': 'Avatar Generation', 
                'description': 'Gera√ß√£o de avatares visuais do p√∫blico-alvo usando IA',
                'features': ['Imagens 1080x1080', 'Gemini + OpenRouter', 'Base64 encoding'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üè¢', 'name': 'Competitor Analysis', 
                'description': 'An√°lise detalhada de concorrentes reais do mercado',
                'features': ['15+ concorrentes', 'Dados reais', 'An√°lise SWOT'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üìà', 'name': 'Sales Funnel', 
                'description': 'Gera√ß√£o de gr√°ficos de funil de vendas personalizados',
                'features': ['Gr√°ficos IA', 'M√∫ltiplos formatos', 'Base64 export'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üîç', 'name': 'Keyword Research', 
                'description': 'Pesquisa abrangente de palavras-chave do nicho',
                'features': ['Palavras prim√°rias', 'Long-tail', 'Volume de busca'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üìù', 'name': 'Content Strategy', 
                'description': 'Estrat√©gia completa de marketing de conte√∫do',
                'features': ['Pilares de conte√∫do', 'Calend√°rio editorial', 'Multi-plataforma'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üìä', 'name': 'Market Analysis', 
                'description': 'An√°lise detalhada do mercado e oportunidades',
                'features': ['Segmenta√ß√£o', 'Tend√™ncias', 'TAM/SAM/SOM'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üéØ', 'name': 'Persona Development', 
                'description': 'Desenvolvimento de personas detalhadas',
                'features': ['Personas prim√°rias', 'Comportamento', 'Jornada do cliente'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üí∞', 'name': 'Pricing Strategy', 
                'description': 'Estrat√©gia de precifica√ß√£o baseada em valor',
                'features': ['Modelos de pre√ßo', 'Tiers', 'An√°lise competitiva'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üöö', 'name': 'Distribution Channels', 
                'description': 'Mapeamento de canais de distribui√ß√£o',
                'features': ['Canais digitais', 'Parcerias', 'ROI por canal'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': '‚ö†Ô∏è', 'name': 'Risk Assessment', 
                'description': 'Avalia√ß√£o completa de riscos do neg√≥cio',
                'features': ['Riscos de mercado', 'Mitiga√ß√£o', 'Planos B'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üíπ', 'name': 'Financial Projections', 
                'description': 'Proje√ß√µes financeiras e an√°lise de viabilidade',
                'features': ['Receitas', 'Custos', 'ROI projetado'],
                'status': 'Dispon√≠vel'
            },
            {
                'icon': 'üìã', 'name': 'Final Report', 
                'description': 'Relat√≥rio final consolidado com todos os insights',
                'features': ['Sum√°rio executivo', 'Recomenda√ß√µes', 'Pr√≥ximos passos'],
                'status': 'Dispon√≠vel'
            }
        ]
        
        # Grid de m√≥dulos (3 por linha)
        for i, module in enumerate(modules_data):
            if i % 3 == 0:
                row_frame = ttk.Frame(parent, style='Modern.TFrame')
                row_frame.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
            
            module_card = ModernCard(row_frame, 
                                    title=f"{module['icon']} {module['name']}", 
                                    subtitle=module['status'])
            module_card.pack(side='left', fill='both', expand=True,
                            padx=(0, ModernStyle.SPACING['md'] if i % 3 < 2 else 0))
            
            # Descri√ß√£o
            desc_label = ttk.Label(module_card.content_frame, 
                                  text=module['description'],
                                  style='Modern.TLabel', 
                                  wraplength=250)
            desc_label.pack(anchor='w', pady=(0, ModernStyle.SPACING['md']))
            
            # Features
            features_label = ttk.Label(module_card.content_frame, 
                                      text="Recursos:",
                                      style='Subheading.TLabel')
            features_label.pack(anchor='w', pady=(0, ModernStyle.SPACING['xs']))
            
            for feature in module['features']:
                feature_label = ttk.Label(module_card.content_frame, 
                                         text=f"‚Ä¢ {feature}",
                                         style='Caption.TLabel')
                feature_label.pack(anchor='w', padx=(ModernStyle.SPACING['md'], 0))
            
            # Bot√£o de teste individual
            test_btn = ModernButton(module_card.content_frame,
                                   text="Testar M√≥dulo",
                                   command=lambda m=module: self.test_individual_module(m),
                                   style_type="outline")
            test_btn.pack(anchor='w', pady=(ModernStyle.SPACING['md'], 0))
    
    def create_progress_tab(self):
        """Aba de progresso em tempo real"""
        progress_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(progress_frame, "üìä Progresso", "üìä")
        
        # Card principal de progresso
        progress_card = ModernCard(progress_frame, 
                                  title="Progresso da An√°lise", 
                                  subtitle="Acompanhamento em tempo real",
                                  icon="üìä")
        progress_card.pack(fill='both', expand=True, padx=ModernStyle.SPACING['lg'],
                          pady=ModernStyle.SPACING['lg'])
        
        # Barra de progresso principal
        self.main_progress = ModernProgressBar(progress_card.content_frame)
        self.main_progress.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
        
        # Grid de progresso por m√≥dulo
        modules_progress_frame = ttk.Frame(progress_card.content_frame, style='Modern.TFrame')
        modules_progress_frame.pack(fill='both', expand=True, pady=(0, ModernStyle.SPACING['lg']))
        
        # T√≠tulo da se√ß√£o
        modules_title = ttk.Label(modules_progress_frame, 
                                 text="Progresso por M√≥dulo",
                                 style='Heading.TLabel')
        modules_title.pack(anchor='w', pady=(0, ModernStyle.SPACING['md']))
        
        # Lista de m√≥dulos com progresso
        self.modules_progress_list = ModernListView(modules_progress_frame,
                                                   columns=['M√≥dulo', 'Status', 'Progresso', 'Tempo'])
        self.modules_progress_list.pack(fill='both', expand=True)
        
        # Log de atividades
        log_frame = ttk.Frame(progress_card.content_frame, style='Modern.TFrame')
        log_frame.pack(fill='both', expand=True, pady=(ModernStyle.SPACING['lg'], 0))
        
        log_title = ttk.Label(log_frame, text="Log de Atividades", style='Heading.TLabel')
        log_title.pack(anchor='w', pady=(0, ModernStyle.SPACING['md']))
        
        # Text widget para log
        self.log_text = tk.Text(log_frame, 
                               bg=ModernStyle.COLORS['bg_tertiary'],
                               fg=ModernStyle.COLORS['text_primary'],
                               font=ModernStyle.FONTS['code'],
                               height=10,
                               wrap='word')
        self.log_text.pack(fill='both', expand=True)
        
        # Scrollbar para log
        log_scrollbar = ttk.Scrollbar(log_frame, orient='vertical', 
                                     command=self.log_text.yview,
                                     style='Modern.Vertical.TScrollbar')
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        log_scrollbar.pack(side='right', fill='y')
    
    def create_results_tab(self):
        """Aba de resultados"""
        results_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(results_frame, "üìã Resultados", "üìã")
        
        # Notebook interno para diferentes tipos de resultado
        results_notebook = ttk.Notebook(results_frame, style='Modern.TNotebook')
        results_notebook.pack(fill='both', expand=True, padx=ModernStyle.SPACING['lg'],
                             pady=ModernStyle.SPACING['lg'])
        
        # Aba de sum√°rio
        self.create_summary_results(results_notebook)
        
        # Aba de m√≥dulos individuais
        self.create_individual_results(results_notebook)
        
        # Aba de exporta√ß√£o
        self.create_export_results(results_notebook)
    
    def create_summary_results(self, parent):
        """Cria aba de sum√°rio dos resultados"""
        summary_frame = ttk.Frame(parent, style='Modern.TFrame')
        parent.add(summary_frame, text="üìä Sum√°rio")
        
        # Card de sum√°rio executivo
        summary_card = ModernCard(summary_frame,
                                 title="Sum√°rio Executivo",
                                 subtitle="Principais insights da an√°lise",
                                 icon="üìä")
        summary_card.pack(fill='both', expand=True, padx=ModernStyle.SPACING['md'],
                         pady=ModernStyle.SPACING['md'])
        
        # Placeholder para resultados
        placeholder_label = ttk.Label(summary_card.content_frame,
                                     text="Execute uma an√°lise para ver os resultados aqui.",
                                     style='Modern.TLabel')
        placeholder_label.pack(expand=True)
    
    def create_individual_results(self, parent):
        """Cria aba de resultados individuais"""
        individual_frame = ttk.Frame(parent, style='Modern.TFrame')
        parent.add(individual_frame, text="üß© Por M√≥dulo")
        
        # Lista de resultados por m√≥dulo
        self.results_list = ModernListView(individual_frame,
                                          columns=['M√≥dulo', 'Status', 'Resultado', 'A√ß√µes'])
        self.results_list.pack(fill='both', expand=True, padx=ModernStyle.SPACING['md'],
                              pady=ModernStyle.SPACING['md'])
    
    def create_export_results(self, parent):
        """Cria aba de exporta√ß√£o"""
        export_frame = ttk.Frame(parent, style='Modern.TFrame')
        parent.add(export_frame, text="üì§ Exportar")
        
        # Card de exporta√ß√£o
        export_card = ModernCard(export_frame,
                                title="Exportar Resultados",
                                subtitle="Exporte os resultados em diferentes formatos",
                                icon="üì§")
        export_card.pack(fill='both', expand=True, padx=ModernStyle.SPACING['md'],
                        pady=ModernStyle.SPACING['md'])
        
        # Op√ß√µes de exporta√ß√£o
        export_options = ttk.Frame(export_card.content_frame, style='Modern.TFrame')
        export_options.pack(fill='x', pady=ModernStyle.SPACING['md'])
        
        # Bot√µes de exporta√ß√£o
        pdf_btn = ModernButton(export_options,
                              text="Exportar PDF",
                              command=self.export_pdf,
                              style_type="primary",
                              icon="üìÑ")
        pdf_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        excel_btn = ModernButton(export_options,
                                text="Exportar Excel",
                                command=self.export_excel,
                                style_type="success",
                                icon="üìä")
        excel_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        json_btn = ModernButton(export_options,
                               text="Exportar JSON",
                               command=self.export_json,
                               style_type="secondary",
                               icon="üìã")
        json_btn.pack(side='left')
    
    def create_sessions_tab(self):
        """Aba de gerenciamento de sess√µes"""
        sessions_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(sessions_frame, "üíæ Sess√µes", "üíæ")
        
        # Card de gerenciamento
        sessions_card = ModernCard(sessions_frame,
                                  title="Gerenciamento de Sess√µes",
                                  subtitle="Gerencie suas an√°lises salvas",
                                  icon="üíæ")
        sessions_card.pack(fill='both', expand=True, padx=ModernStyle.SPACING['lg'],
                          pady=ModernStyle.SPACING['lg'])
        
        # Lista detalhada de sess√µes
        self.detailed_sessions_list = ModernListView(sessions_card.content_frame,
                                                    columns=['ID', 'Criada', 'Atualizada', 
                                                           'Status', 'Progresso', 'M√≥dulos', 'Tamanho'])
        self.detailed_sessions_list.pack(fill='both', expand=True, 
                                        pady=(0, ModernStyle.SPACING['lg']))
        
        # Bot√µes de a√ß√£o
        actions_frame = ttk.Frame(sessions_card.content_frame, style='Modern.TFrame')
        actions_frame.pack(fill='x')
        
        refresh_btn = ModernButton(actions_frame,
                                  text="Atualizar Lista",
                                  command=self.refresh_sessions_list,
                                  style_type="outline",
                                  icon="üîÑ")
        refresh_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        backup_btn = ModernButton(actions_frame,
                                 text="Backup Sess√µes",
                                 command=self.backup_sessions,
                                 style_type="secondary",
                                 icon="üíæ")
        backup_btn.pack(side='left', padx=(0, ModernStyle.SPACING['md']))
        
        cleanup_btn = ModernButton(actions_frame,
                                  text="Limpar Antigas",
                                  command=self.cleanup_old_sessions,
                                  style_type="warning",
                                  icon="üßπ")
        cleanup_btn.pack(side='left')
    
    def create_settings_tab(self):
        """Aba de configura√ß√µes do sistema"""
        settings_frame = ttk.Frame(self.app.notebook, style='Modern.TFrame')
        self.app.notebook.add_tab(settings_frame, "‚öôÔ∏è Configura√ß√µes", "‚öôÔ∏è")
        
        # Scroll container
        canvas = tk.Canvas(settings_frame, bg=ModernStyle.COLORS['bg_secondary'], 
                          highlightthickness=0)
        scrollbar = ttk.Scrollbar(settings_frame, orient="vertical", command=canvas.yview,
                                 style='Modern.Vertical.TScrollbar')
        scrollable_frame = ttk.Frame(canvas, style='Modern.TFrame')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Cards de configura√ß√µes
        self.create_settings_cards(scrollable_frame)
    
    def create_settings_cards(self, parent):
        """Cria cards de configura√ß√µes"""
        # Card de APIs
        api_card = ModernCard(parent,
                             title="Configura√ß√µes de API",
                             subtitle="Configure suas chaves de API",
                             icon="üîë")
        api_card.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
        
        # Campos de API
        api_fields = [
            ("OpenAI API Key:", "openai_key"),
            ("Gemini API Key:", "gemini_key"),
            ("OpenRouter API Key:", "openrouter_key"),
        ]
        
        for label, key in api_fields:
            field_frame = ttk.Frame(api_card.content_frame, style='Modern.TFrame')
            field_frame.pack(fill='x', pady=(0, ModernStyle.SPACING['md']))
            
            label_widget = ttk.Label(field_frame, text=label, style='Subheading.TLabel')
            label_widget.pack(anchor='w', pady=(0, ModernStyle.SPACING['xs']))
            
            entry = ttk.Entry(field_frame, style='Modern.TEntry', show='*', width=50)
            entry.pack(fill='x')
        
        # Card de prefer√™ncias
        prefs_card = ModernCard(parent,
                               title="Prefer√™ncias do Sistema",
                               subtitle="Personalize o comportamento da aplica√ß√£o",
                               icon="üéõÔ∏è")
        prefs_card.pack(fill='x', pady=(0, ModernStyle.SPACING['lg']))
        
        # Checkboxes de prefer√™ncias
        self.auto_save_var = tk.BooleanVar(value=True)
        auto_save_check = ttk.Checkbutton(prefs_card.content_frame,
                                         text="Salvamento autom√°tico de sess√µes",
                                         variable=self.auto_save_var,
                                         style='Modern.TCheckbutton')
        auto_save_check.pack(anchor='w', pady=(0, ModernStyle.SPACING['sm']))
        
        self.notifications_var = tk.BooleanVar(value=True)
        notifications_check = ttk.Checkbutton(prefs_card.content_frame,
                                             text="Notifica√ß√µes de progresso",
                                             variable=self.notifications_var,
                                             style='Modern.TCheckbutton')
        notifications_check.pack(anchor='w', pady=(0, ModernStyle.SPACING['sm']))
        
        self.detailed_logs_var = tk.BooleanVar(value=False)
        logs_check = ttk.Checkbutton(prefs_card.content_frame,
                                    text="Logs detalhados (debug)",
                                    variable=self.detailed_logs_var,
                                    style='Modern.TCheckbutton')
        logs_check.pack(anchor='w')
        
        # Card de informa√ß√µes do sistema
        info_card = ModernCard(parent,
                              title="Informa√ß√µes do Sistema",
                              subtitle="Detalhes t√©cnicos da aplica√ß√£o",
                              icon="‚ÑπÔ∏è")
        info_card.pack(fill='x')
        
        # Informa√ß√µes
        info_data = [
            ("Vers√£o:", "ARQV30 Enhanced v3.0"),
            ("Build:", "2024.10.31"),
            ("Python:", "3.11+"),
            ("Interface:", "Tkinter Nativo"),
            ("Plataforma:", "Windows"),
            ("M√≥dulos:", "12 dispon√≠veis"),
        ]
        
        for label, value in info_data:
            info_frame = ttk.Frame(info_card.content_frame, style='Modern.TFrame')
            info_frame.pack(fill='x', pady=(0, ModernStyle.SPACING['xs']))
            
            label_widget = ttk.Label(info_frame, text=label, style='Subheading.TLabel')
            label_widget.pack(side='left')
            
            value_widget = ttk.Label(info_frame, text=value, style='Modern.TLabel')
            value_widget.pack(side='right')
    
    # M√©todos de a√ß√£o
    def start_complete_analysis(self):
        """Inicia an√°lise completa"""
        # Coleta dados do formul√°rio
        analysis_data = {}
        for key, var in self.form_vars.items():
            value = var.get()
            if value and not any(placeholder in value for placeholder in ["Ex:", "exemplo"]):
                analysis_data[key] = value
        
        if not analysis_data:
            messagebox.showwarning("Aviso", "Preencha pelo menos um campo para iniciar a an√°lise.")
            return
        
        # Inicia an√°lise em thread separada
        self.app.analysis_data = analysis_data
        threading.Thread(target=self.run_analysis_thread, daemon=True).start()
    
    def run_analysis_thread(self):
        """Executa an√°lise em thread separada"""
        try:
            # Simula an√°lise completa
            self.app.root.after(0, lambda: self.update_progress("Iniciando an√°lise...", 0))
            
            modules = [
                "Avatar Generation", "Competitor Analysis", "Sales Funnel",
                "Keyword Research", "Content Strategy", "Market Analysis",
                "Persona Development", "Pricing Strategy", "Distribution Channels",
                "Risk Assessment", "Financial Projections", "Final Report"
            ]
            
            for i, module in enumerate(modules):
                progress = (i + 1) / len(modules) * 100
                self.app.root.after(0, lambda m=module, p=progress: 
                                   self.update_progress(f"Executando {m}...", p))
                
                # Simula tempo de processamento
                import time
                time.sleep(2)
            
            self.app.root.after(0, lambda: self.update_progress("An√°lise conclu√≠da!", 100))
            self.app.root.after(0, lambda: messagebox.showinfo("Sucesso", 
                                                              "An√°lise completa finalizada!"))
            
        except Exception as e:
            self.app.root.after(0, lambda: messagebox.showerror("Erro", f"Erro na an√°lise: {e}"))
    
    def update_progress(self, message, percentage):
        """Atualiza progresso na interface"""
        if hasattr(self, 'main_progress'):
            self.main_progress.update_progress(percentage, message)
        
        if hasattr(self, 'log_text'):
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.log_text.insert('end', f"[{timestamp}] {message}\n")
            self.log_text.see('end')
    
    def save_configuration(self):
        """Salva configura√ß√£o atual"""
        config_data = {key: var.get() for key, var in self.form_vars.items()}
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            import json
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            messagebox.showinfo("Sucesso", "Configura√ß√£o salva com sucesso!")
    
    def load_configuration(self):
        """Carrega configura√ß√£o salva"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                import json
                with open(filename, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                for key, value in config_data.items():
                    if key in self.form_vars:
                        self.form_vars[key].set(value)
                
                messagebox.showinfo("Sucesso", "Configura√ß√£o carregada com sucesso!")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao carregar configura√ß√£o: {e}")
    
    def refresh_sessions_list(self):
        """Atualiza lista de sess√µes"""
        # Placeholder - implementar com session_manager real
        pass
    
    def continue_session(self):
        """Continua sess√£o selecionada"""
        messagebox.showinfo("Info", "Funcionalidade em desenvolvimento")
    
    def delete_session(self):
        """Exclui sess√£o selecionada"""
        messagebox.showinfo("Info", "Funcionalidade em desenvolvimento")
    
    def test_individual_module(self, module):
        """Testa m√≥dulo individual"""
        messagebox.showinfo("Teste", f"Testando m√≥dulo: {module['name']}")
    
    def export_pdf(self):
        """Exporta resultados em PDF"""
        messagebox.showinfo("Export", "Exporta√ß√£o PDF em desenvolvimento")
    
    def export_excel(self):
        """Exporta resultados em Excel"""
        messagebox.showinfo("Export", "Exporta√ß√£o Excel em desenvolvimento")
    
    def export_json(self):
        """Exporta resultados em JSON"""
        messagebox.showinfo("Export", "Exporta√ß√£o JSON em desenvolvimento")
    
    def backup_sessions(self):
        """Faz backup das sess√µes"""
        messagebox.showinfo("Backup", "Backup em desenvolvimento")
    
    def cleanup_old_sessions(self):
        """Limpa sess√µes antigas"""
        messagebox.showinfo("Cleanup", "Limpeza em desenvolvimento")