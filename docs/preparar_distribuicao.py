#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PREPARADOR DE DISTRIBUI√á√ÉO ARQ-ALPHA-V9
=======================================
Prepara todos os arquivos necess√°rios para distribui√ß√£o do ARQ-ALPHA-V9
incluindo verifica√ß√µes, otimiza√ß√µes e cria√ß√£o de pacotes.

Autor: ARQ-ALPHA-V9 Team
Data: 2025-10-31
"""

import os
import sys
import shutil
import zipfile
import json
from pathlib import Path
import subprocess
import hashlib

class DistributionPreparer:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.dist_dir = self.project_root / "distribuicao"
        self.version = "9.0.0"
        
    def print_step(self, message):
        print(f"üîß {message}")
        
    def print_success(self, message):
        print(f"‚úÖ {message}")
        
    def print_error(self, message):
        print(f"‚ùå {message}")

    def clean_project(self):
        """Remove arquivos desnecess√°rios"""
        self.print_step("Limpando projeto...")
        
        # Diret√≥rios para remover
        dirs_to_remove = [
            '__pycache__',
            '.pytest_cache',
            'build',
            'dist',
            '*.egg-info',
            '.coverage',
            'htmlcov',
            'node_modules'
        ]
        
        # Arquivos para remover
        files_to_remove = [
            '*.pyc',
            '*.pyo',
            '*.pyd',
            '.DS_Store',
            'Thumbs.db',
            '*.log',
            '*.tmp'
        ]
        
        removed_count = 0
        
        # Remover diret√≥rios
        for pattern in dirs_to_remove:
            for path in self.project_root.rglob(pattern):
                if path.is_dir():
                    try:
                        shutil.rmtree(path)
                        removed_count += 1
                        print(f"  Removido: {path.relative_to(self.project_root)}")
                    except:
                        pass
        
        # Remover arquivos
        for pattern in files_to_remove:
            for path in self.project_root.rglob(pattern):
                if path.is_file():
                    try:
                        path.unlink()
                        removed_count += 1
                        print(f"  Removido: {path.relative_to(self.project_root)}")
                    except:
                        pass
        
        self.print_success(f"Limpeza conclu√≠da: {removed_count} itens removidos")

    def verify_dependencies(self):
        """Verifica se todas as depend√™ncias est√£o corretas"""
        self.print_step("Verificando depend√™ncias...")
        
        requirements_file = self.project_root / "requirements.txt"
        if not requirements_file.exists():
            self.print_error("requirements.txt n√£o encontrado!")
            return False
        
        # Ler requirements
        with open(requirements_file, 'r') as f:
            requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        print(f"  Encontradas {len(requirements)} depend√™ncias")
        
        # Verificar se as depend√™ncias cr√≠ticas est√£o presentes
        critical_deps = [
            'flask', 'requests', 'beautifulsoup4', 'selenium', 
            'playwright', 'openai', 'anthropic', 'google-generativeai'
        ]
        
        missing_critical = []
        for dep in critical_deps:
            found = any(dep in req.lower() for req in requirements)
            if not found:
                missing_critical.append(dep)
        
        if missing_critical:
            self.print_error(f"Depend√™ncias cr√≠ticas faltando: {', '.join(missing_critical)}")
            return False
        
        self.print_success("Todas as depend√™ncias cr√≠ticas est√£o presentes")
        return True

    def create_distribution_structure(self):
        """Cria estrutura de distribui√ß√£o"""
        self.print_step("Criando estrutura de distribui√ß√£o...")
        
        # Limpar diret√≥rio de distribui√ß√£o
        if self.dist_dir.exists():
            shutil.rmtree(self.dist_dir)
        
        self.dist_dir.mkdir(parents=True)
        
        # Estrutura de diret√≥rios
        dirs_to_create = [
            "ARQ-ALPHA-V9",
            "ARQ-ALPHA-V9/src",
            "ARQ-ALPHA-V9/external_ai_verifier",
            "ARQ-ALPHA-V9/docs",
            "ARQ-ALPHA-V9/scripts",
            "Instaladores"
        ]
        
        for dir_name in dirs_to_create:
            (self.dist_dir / dir_name).mkdir(parents=True, exist_ok=True)
        
        self.print_success("Estrutura de distribui√ß√£o criada")

    def copy_application_files(self):
        """Copia arquivos da aplica√ß√£o"""
        self.print_step("Copiando arquivos da aplica√ß√£o...")
        
        app_dir = self.dist_dir / "ARQ-ALPHA-V9"
        
        # Arquivos principais
        main_files = [
            "run.py",
            "requirements.txt",
            ".env.example",
            "README.md",
            "instalador_automatico.py",
            "criar_executavel.bat"
        ]
        
        for file_name in main_files:
            source = self.project_root / file_name
            if source.exists():
                shutil.copy2(source, app_dir / file_name)
                print(f"  Copiado: {file_name}")
        
        # Diret√≥rios
        dirs_to_copy = [
            "src",
            "external_ai_verifier"
        ]
        
        for dir_name in dirs_to_copy:
            source = self.project_root / dir_name
            if source.exists():
                dest = app_dir / dir_name
                shutil.copytree(source, dest, dirs_exist_ok=True)
                print(f"  Copiado: {dir_name}/")
        
        self.print_success("Arquivos da aplica√ß√£o copiados")

    def create_documentation(self):
        """Cria documenta√ß√£o de instala√ß√£o"""
        self.print_step("Criando documenta√ß√£o...")
        
        docs_dir = self.dist_dir / "ARQ-ALPHA-V9" / "docs"
        
        # Manual de instala√ß√£o
        install_manual = """# ARQ-ALPHA-V9 - Manual de Instala√ß√£o

## Instala√ß√£o Autom√°tica (Recomendada)

### Para Usu√°rios Finais (Windows)
1. Execute `ARQ-ALPHA-V9-Instalador.exe` como Administrador
2. Aguarde a instala√ß√£o completa (pode demorar 15-30 minutos)
3. Siga as instru√ß√µes na tela
4. Execute `iniciar_arq_alpha.bat` para iniciar o sistema

### Para Desenvolvedores
1. Execute `instalador_automatico.py` com Python
2. Ou use `criar_executavel.bat` para gerar o instalador

## Instala√ß√£o Manual

### Pr√©-requisitos
- Windows 10/11
- Python 3.11+
- Node.js 18+
- Visual Studio Build Tools

### Passos
1. Instale Python: https://python.org/downloads/
2. Instale Node.js: https://nodejs.org/
3. Instale Visual Studio Build Tools
4. Execute: `pip install -r requirements.txt`
5. Execute: `python -m playwright install`
6. Configure arquivo `.env` com suas chaves de API
7. Execute: `python run.py`

## Configura√ß√£o

### Chaves de API Necess√°rias
- OpenAI API Key
- Anthropic API Key
- Google Gemini API Key
- Serper API Key (busca)
- Jina API Key (extra√ß√£o)

### Arquivo .env
Copie `.env.example` para `.env` e configure suas chaves:

```
OPENAI_API_KEY=sua_chave_aqui
ANTHROPIC_API_KEY=sua_chave_aqui
GOOGLE_API_KEY=sua_chave_aqui
SERPER_API_KEY=sua_chave_aqui
JINA_API_KEY=sua_chave_aqui
```

## Uso

1. Acesse: http://localhost:12000
2. Configure sua an√°lise
3. Execute as 3 etapas do workflow:
   - Etapa 1: Coleta Massiva Real
   - Etapa 2: S√≠ntese com IA Ativa
   - Etapa 3: Gera√ß√£o de 16 M√≥dulos

## Solu√ß√£o de Problemas

### Erro de Depend√™ncias
Execute: `python verificar_dependencias.py`

### Erro de Navegador
Execute: `python -m playwright install chromium`

### Erro de Compila√ß√£o
Instale Visual Studio Build Tools

### Logs
- Log principal: `app_runtime.log`
- Logs de sess√£o: `log_session_*.txt`

## Suporte

Para suporte t√©cnico, consulte:
- Documenta√ß√£o completa no c√≥digo
- Logs de erro detalhados
- Sistema de logging em tempo real
"""
        
        with open(docs_dir / "INSTALACAO.md", 'w', encoding='utf-8') as f:
            f.write(install_manual)
        
        # Manual do usu√°rio
        user_manual = """# ARQ-ALPHA-V9 - Manual do Usu√°rio

## Vis√£o Geral

O ARQ-ALPHA-V9 √© um sistema avan√ßado de an√°lise de mercado que utiliza:
- Intelig√™ncia Artificial com m√∫ltiplos modelos
- Coleta massiva de dados reais
- An√°lise de conte√∫do viral
- Gera√ß√£o de relat√≥rios especializados

## Interface Principal

### Configura√ß√£o da An√°lise
1. **Segmento de Mercado**: Defina o setor a ser analisado
2. **Produto/Servi√ßo**: Especifique o que ser√° analisado
3. **Pre√ßo**: Valor do produto/servi√ßo
4. **Objetivo de Receita**: Meta financeira
5. **P√∫blico-Alvo**: Descri√ß√£o detalhada do p√∫blico
6. **Contexto Adicional**: Informa√ß√µes extras relevantes

### Workflow de 3 Etapas

#### Etapa 1: Coleta Massiva Real
- Busca em m√∫ltiplas APIs
- Extra√ß√£o de conte√∫do viral
- Captura de screenshots
- Rota√ß√£o autom√°tica de provedores

#### Etapa 2: S√≠ntese com IA Ativa
- An√°lise por IA avan√ßada
- Buscas online ativas
- Valida√ß√£o de informa√ß√µes
- S√≠ntese em formato JSON

#### Etapa 3: Gera√ß√£o de 16 M√≥dulos
- 16 m√≥dulos especializados
- Relat√≥rio final completo
- Mais de 25 p√°ginas
- An√°lise ultra-detalhada

### Verifica√ß√£o AI
- An√°lise de sentimento
- Detec√ß√£o de vi√©s
- Valida√ß√£o por LLM
- Filtros avan√ßados

## Recursos Avan√ßados

### Sistema de Logging
- Logs em tempo real
- Rastreamento de sess√µes
- C√≥digos executados
- Dados extras capturados

### Gerenciamento de Sess√µes
- M√∫ltiplas sess√µes simult√¢neas
- Pausar/retomar an√°lises
- Renomear sess√µes
- Hist√≥rico completo

### Resultados
- Vis√£o geral interativa
- 16 m√≥dulos detalhados
- Screenshots capturados
- Dados coletados brutos

## Dicas de Uso

1. **Configure bem o p√∫blico-alvo** para melhores resultados
2. **Use contexto adicional** para an√°lises mais precisas
3. **Aguarde cada etapa** completar antes de prosseguir
4. **Monitore os logs** para acompanhar o progresso
5. **Salve sess√µes importantes** para refer√™ncia futura

## Limita√ß√µes

- Requer conex√£o com internet
- Dependente de APIs externas
- Tempo de processamento varia
- Qualidade depende dos dados dispon√≠veis

## Troubleshooting

### An√°lise n√£o inicia
- Verifique conex√£o com internet
- Confirme chaves de API v√°lidas
- Reinicie o sistema se necess√°rio

### Resultados incompletos
- Aguarde mais tempo
- Verifique logs de erro
- Tente com par√¢metros diferentes

### Performance lenta
- Feche outras aplica√ß√µes
- Verifique recursos do sistema
- Use par√¢metros mais espec√≠ficos
"""
        
        with open(docs_dir / "MANUAL_USUARIO.md", 'w', encoding='utf-8') as f:
            f.write(user_manual)
        
        self.print_success("Documenta√ß√£o criada")

    def create_batch_scripts(self):
        """Cria scripts batch adicionais"""
        self.print_step("Criando scripts batch...")
        
        scripts_dir = self.dist_dir / "ARQ-ALPHA-V9" / "scripts"
        
        # Script de verifica√ß√£o r√°pida
        quick_check = """@echo off
echo ========================================
echo   ARQ-ALPHA-V9 - VERIFICACAO RAPIDA
echo ========================================
echo.

echo Verificando Python...
python --version
if errorlevel 1 (
    echo ‚ùå Python nao encontrado
    goto :error
) else (
    echo ‚úÖ Python OK
)

echo.
echo Verificando Node.js...
node --version
if errorlevel 1 (
    echo ‚ùå Node.js nao encontrado
    goto :error
) else (
    echo ‚úÖ Node.js OK
)

echo.
echo Verificando dependencias Python...
python -c "import flask, requests, playwright; print('‚úÖ Dependencias principais OK')"
if errorlevel 1 (
    echo ‚ùå Dependencias Python com problema
    goto :error
)

echo.
echo ‚úÖ SISTEMA PRONTO PARA USO!
echo.
echo Para iniciar: python run.py
echo Ou execute: iniciar_arq_alpha.bat
goto :end

:error
echo.
echo ‚ùå PROBLEMAS DETECTADOS
echo Execute o instalador automatico para corrigir
echo.

:end
pause
"""
        
        with open(scripts_dir / "verificacao_rapida.bat", 'w', encoding='utf-8') as f:
            f.write(quick_check)
        
        # Script de atualiza√ß√£o
        update_script = """@echo off
echo ========================================
echo   ARQ-ALPHA-V9 - ATUALIZADOR
echo ========================================
echo.

echo Atualizando dependencias Python...
python -m pip install --upgrade pip
python -m pip install -r requirements.txt --upgrade

echo.
echo Atualizando navegadores Playwright...
python -m playwright install

echo.
echo ‚úÖ Atualizacao concluida!
pause
"""
        
        with open(scripts_dir / "atualizar_sistema.bat", 'w', encoding='utf-8') as f:
            f.write(update_script)
        
        self.print_success("Scripts batch criados")

    def create_version_info(self):
        """Cria arquivo de informa√ß√µes da vers√£o"""
        self.print_step("Criando informa√ß√µes da vers√£o...")
        
        version_info = {
            "name": "ARQ-ALPHA-V9",
            "version": self.version,
            "description": "Sistema de An√°lise Ultra-Detalhada com IA e Ferramentas",
            "author": "ARQ-ALPHA-V9 Team",
            "build_date": "2025-10-31",
            "python_version": "3.11+",
            "node_version": "18+",
            "features": [
                "Coleta Massiva Real",
                "S√≠ntese com IA Ativa",
                "Verifica√ß√£o AI",
                "16 M√≥dulos Especializados",
                "Sistema de Logging em Tempo Real",
                "Interface Web Responsiva",
                "M√∫ltiplas APIs de IA",
                "Captura de Screenshots",
                "An√°lise de Conte√∫do Viral"
            ],
            "requirements": {
                "os": "Windows 10/11",
                "python": "3.11+",
                "nodejs": "18+",
                "memory": "4GB RAM m√≠nimo",
                "storage": "2GB espa√ßo livre",
                "internet": "Conex√£o est√°vel necess√°ria"
            },
            "apis_supported": [
                "OpenAI GPT-4",
                "Anthropic Claude",
                "Google Gemini",
                "Serper Search",
                "Jina AI",
                "Exa Search",
                "Firecrawl",
                "Playwright"
            ]
        }
        
        version_file = self.dist_dir / "ARQ-ALPHA-V9" / "version_info.json"
        with open(version_file, 'w', encoding='utf-8') as f:
            json.dump(version_info, f, indent=2, ensure_ascii=False)
        
        self.print_success("Informa√ß√µes da vers√£o criadas")

    def create_zip_package(self):
        """Cria pacote ZIP para distribui√ß√£o"""
        self.print_step("Criando pacote ZIP...")
        
        zip_path = self.dist_dir / f"ARQ-ALPHA-V9-v{self.version}-Completo.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            app_dir = self.dist_dir / "ARQ-ALPHA-V9"
            
            for file_path in app_dir.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(self.dist_dir)
                    zipf.write(file_path, arcname)
                    print(f"  Adicionado: {arcname}")
        
        # Calcular hash do arquivo
        with open(zip_path, 'rb') as f:
            file_hash = hashlib.sha256(f.read()).hexdigest()
        
        # Criar arquivo de hash
        hash_file = zip_path.with_suffix('.zip.sha256')
        with open(hash_file, 'w') as f:
            f.write(f"{file_hash}  {zip_path.name}\n")
        
        file_size = zip_path.stat().st_size / (1024 * 1024)  # MB
        
        self.print_success(f"Pacote ZIP criado: {zip_path.name} ({file_size:.1f} MB)")
        print(f"  Hash SHA256: {file_hash}")

    def generate_checksums(self):
        """Gera checksums para todos os arquivos"""
        self.print_step("Gerando checksums...")
        
        checksums = {}
        app_dir = self.dist_dir / "ARQ-ALPHA-V9"
        
        for file_path in app_dir.rglob('*'):
            if file_path.is_file():
                with open(file_path, 'rb') as f:
                    file_hash = hashlib.sha256(f.read()).hexdigest()
                
                rel_path = file_path.relative_to(app_dir)
                checksums[str(rel_path)] = file_hash
        
        # Salvar checksums
        checksums_file = self.dist_dir / "checksums.json"
        with open(checksums_file, 'w', encoding='utf-8') as f:
            json.dump(checksums, f, indent=2, ensure_ascii=False)
        
        self.print_success(f"Checksums gerados para {len(checksums)} arquivos")

    def run(self):
        """Executa o preparador de distribui√ß√£o"""
        print("=" * 60)
        print("    ARQ-ALPHA-V9 - PREPARADOR DE DISTRIBUI√á√ÉO")
        print("=" * 60)
        print()
        
        try:
            # Executar todas as etapas
            self.clean_project()
            
            if not self.verify_dependencies():
                return False
            
            self.create_distribution_structure()
            self.copy_application_files()
            self.create_documentation()
            self.create_batch_scripts()
            self.create_version_info()
            self.generate_checksums()
            self.create_zip_package()
            
            print()
            print("=" * 60)
            print("    DISTRIBUI√á√ÉO PREPARADA COM SUCESSO!")
            print("=" * 60)
            print()
            print(f"üìÅ Localiza√ß√£o: {self.dist_dir}")
            print(f"üì¶ Pacote ZIP: ARQ-ALPHA-V9-v{self.version}-Completo.zip")
            print()
            print("üöÄ Pr√≥ximos passos:")
            print("   1. Execute 'criar_executavel.bat' para gerar o instalador")
            print("   2. Teste o instalador em um Windows limpo")
            print("   3. Distribua o pacote ZIP + execut√°vel")
            print()
            
            return True
            
        except Exception as e:
            self.print_error(f"Erro durante prepara√ß√£o: {e}")
            return False

def main():
    preparer = DistributionPreparer()
    success = preparer.run()
    
    if success:
        print("‚úÖ Prepara√ß√£o conclu√≠da com sucesso!")
    else:
        print("‚ùå Prepara√ß√£o falhou!")
    
    input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    main()